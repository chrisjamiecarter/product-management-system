@page "/Account/ResetPassword"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject ILogger<ResetPassword> Logger
@inject IdentityRedirectManager RedirectManager
@inject ISenderService Sender

<PageTitle>Reset password</PageTitle>

<section class="d-flex w-100 h-100 p-3 mx-auto flex-column align-items-center">
    <div class="mt-auto mb-auto w-100 px-3">
        <div class="row d-flex flex-md-row-reverse justify-content-center align-items-center h-100 gap-2">
            <div class="col-md-9 col-lg-6 col-xl-5 offset-xl-1 d-flex justify-content-center">
                <img src="/img/product-management-system-logo-with-text.png" class="img-fluid p-5 overflow-hidden rounded-circle" alt="Application logo" />
            </div>
            <div class="col-md-8 col-lg-6 col-xl-5">
                <h1 class="h3 mb-3 fw-normal">Please reset your password</h1>
                <StatusMessage Status="@status" />
                <EditForm Model="Input" FormName="reset-password" OnValidSubmit="ResetPasswordAsync" OnInvalidSubmit="HandleInvalidSubmit" method="post">
                    <DataAnnotationsValidator />
                    <input type="hidden" name="Input.Token" value="@Input.Token" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" id="Input.Email" class=@($"form-control form-control-lg {ValidationHelper.GetValidationCssClass(Input, nameof(Input.Email), showValidation)}") autocomplete="email" aria-required="true" placeholder="name@example.com" />
                        <label for="Input.Email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="invalid-feedback" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class=@($"form-control form-control-lg {ValidationHelper.GetValidationCssClass(Input, nameof(Input.Password), showValidation)}") autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="Input.Password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="invalid-feedback" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class=@($"form-control form-control-lg {ValidationHelper.GetValidationCssClass(Input, nameof(Input.ConfirmPassword), showValidation)}") autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                        <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="invalid-feedback" />
                    </div>
                    <button id="resetSubmit" type="submit" class="btn btn-dark btn-lg w-100 px-3">
                        Reset
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    private bool showValidation = false;
    private StatusModel status = StatusModel.None;

    [SupplyParameterFromForm]
    private ResetPasswordInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Token = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task ResetPasswordAsync()
    {
        var authCommand = new ResetPasswordCommand(Input.Email, Input.Password, Input.Token);
        var authResult = await Sender.SendAsync(authCommand);
        if (authResult.IsSuccess)
        {
            Logger.LogInformation("User has reset their password.");
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }
        else
        {
            status = new StatusModel(authResult.Error.Message, MessageLevel.Error);
            Logger.LogWarning("{code}: {message}", authResult.Error.Code, authResult.Error.Message);
        }
    }

    private void HandleInvalidSubmit()
    {
        showValidation = true;
    }
}
