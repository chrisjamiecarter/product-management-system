@page "/Account/ResendEmailConfirmation"

@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProductManagement.Application.Features.Auth.Commands.GenerateEmailConfirmation

@inject ILogger<ResendEmailConfirmation> Logger
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject ISenderService Sender

<PageTitle>Resend email confirmation</PageTitle>

<h1>Resend email confirmation</h1>
<h2>Enter your email.</h2>
<hr />
<StatusMessage Status="@status" />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Resend</button>
        </EditForm>
    </div>
</div>

@code {
    private StatusModel status = StatusModel.None;

    [SupplyParameterFromForm]
    private ResendEmailConfirmationInputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var confirmUrl = NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri;
        
        var command = new GenerateEmailConfirmationCommand(Input.Email!, confirmUrl, string.Empty);
        var result = await Sender.SendAsync(command);
        if (result.IsSuccess)
        {
            Logger.LogInformation("Verification email sent to user.");
            status = new StatusModel("Verification email sent. Please check your email.", MessageLevel.Success);
        }
        else
        {
            status = new StatusModel(result.Error.Message, MessageLevel.Error);
            Logger.LogWarning("{code}: {message}", result.Error.Code, result.Error.Message);
        }
    }
}
