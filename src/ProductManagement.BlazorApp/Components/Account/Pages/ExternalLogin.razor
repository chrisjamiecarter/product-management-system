@page "/Account/ExternalLogin"

@inject ISenderService Sender
@inject IdentityRedirectManager RedirectManager

@code {
    public const string LoginCallbackAction = "LoginCallback";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Signin", new StatusModel($"Error from external provider: {RemoteError}", MessageLevel.Error), HttpContext);
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Signin");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        var command = new SignInWithExternalLoginCommand();
        var result = await Sender.SendAsync(command);
        if (result.IsFailure)
        {
            RedirectManager.RedirectToWithStatus("Account/Signin", new StatusModel("Error during sign in.", MessageLevel.Error), HttpContext);
        }
        
        RedirectManager.RedirectTo("Account/Manage");
    }
}
