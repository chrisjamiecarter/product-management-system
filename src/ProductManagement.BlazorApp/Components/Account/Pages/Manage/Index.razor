@page "/Account/Manage"

@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims

@inject ILogger<Index> Logger
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject ISenderService Sender
@inject ICurrentUserService CurrentUserService

<PageTitle>Manage Account</PageTitle>

<div class="container-md py-3">

    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb mb-1">
            <li class="breadcrumb-item active" aria-current="page">Account</li>
            <li class="breadcrumb-item active" aria-current="page">Manage</li>
        </ol>
    </nav>

    <div class="d-flex gap-3 align-items-center mb-4">
        <PersonGearFillSvg Height="1.5rem" Width="1.5rem" />
        <h1 class="h2 mb-0">Manage Account</h1>
    </div>

    <StatusMessage Status="@userStatus" />
    @if (userStatus == StatusModel.None)
    {
        <div class="row">

            <h3>Change email</h3>
            <div class="row mb-4">
                <div class="col-xl-6">
                    <StatusMessage Status="@emailStatus" />
                    <EditForm Model="EmailInput" FormName="change-email" OnValidSubmit="EditEmailAsync" method="post">
                        <DataAnnotationsValidator />
                        <div class="form-floating mb-3 input-group">
                            <input type="text" value="@email" id="email" class="form-control" placeholder="Enter your email" disabled />
                            <div class="input-group-append">
                                <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                            </div>
                            <label for="email" class="form-label">Email</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="EmailInput.NewEmail" id="EmailInput.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter a new email" />
                            <label for="Input.NewEmail" class="form-label">New email</label>
                            <ValidationMessage For="() => EmailInput.NewEmail" class="text-danger" />
                        </div>
                        <button class="btn btn-dark w-100" type="submit">Update email</button>
                    </EditForm>
                </div>
            </div>

            <hr />

            <h3>Change password</h3>
            <div class="row mb-4">
                <div class="col-xl-6">
                    <StatusMessage Status="@passwordStatus" />
                    <EditForm Model="PasswordInput" FormName="change-password" OnValidSubmit="EditPasswordAsync" method="post">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="PasswordInput.OldPassword" id="PasswordInput.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter the old password" />
                            <label for="PasswordInput.OldPassword" class="form-label">Old password</label>
                            <ValidationMessage For="() => PasswordInput.OldPassword" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="PasswordInput.NewPassword" id="PasswordInput.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                            <label for="PasswordInput.NewPassword" class="form-label">New password</label>
                            <ValidationMessage For="() => PasswordInput.NewPassword" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="PasswordInput.ConfirmPassword" id="PasswordInput.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                            <label for="PasswordInput.ConfirmPassword" class="form-label">Confirm password</label>
                            <ValidationMessage For="() => PasswordInput.ConfirmPassword" class="text-danger" />
                        </div>
                        <button class="btn btn-dark w-100" type="submit">Update password</button>
                    </EditForm>
                </div>
            </div>

        </div>
    }
</div>

@code {
    private StatusModel emailStatus = StatusModel.None;
    private StatusModel passwordStatus = StatusModel.None;
    private StatusModel userStatus = StatusModel.None;
    private ApplicationUserDto user = default!;

    private string? email;
    private bool isEmailConfirmed;
    // private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private ChangeEmailInputModel EmailInput { get; set; } = new();

    [SupplyParameterFromForm(FormName = "change-password")]
    private ChangePasswordInputModel PasswordInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = CurrentUserService.UserId;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO:
            userStatus = new StatusModel("Unable to load user..", MessageLevel.Error);
            return;
        }

        var query = new GetCurrentUserQuery(currentUserId);
        var result = await Sender.SendAsync(query);
        if (result.IsFailure)
        {
            userStatus = new StatusModel(result.Error.Message, MessageLevel.Error);
            return;
        }

        user = new ApplicationUserDto(result.Value.UserId, result.Value.Email, result.Value.Role, result.Value.EmailConfirmed);

        // TODO:
        // Confirm what route I want to take regarding Username vs Email. They are the same in this app and the messaging should be consistent.
        email = result.Value.Email;
        isEmailConfirmed = result.Value.EmailConfirmed;

        // TODO:
        // This needs to be part of the user registration process.
        // hasPassword = await UserManager.HasPasswordAsync(user);
        // if (!hasPassword)
        // {
        //     RedirectManager.RedirectTo("Account/Manage/SetPassword");
        // }

        EmailInput.NewEmail ??= email;
    }

    private async Task EditEmailAsync()
    {
        if (EmailInput.NewEmail is null || EmailInput.NewEmail == email)
        {
            emailStatus = new StatusModel("Your email is unchanged.", MessageLevel.Info);
            return;
        }

        var confirmUrl = NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri;

        var command = new GenerateEmailChangeCommand(user.Id, EmailInput.NewEmail);
        var result = await Sender.SendAsync(command);
        if (result.IsSuccess)
        {
            emailStatus = new StatusModel("Confirmation link to change email sent. Please check your email.", MessageLevel.Success);
            Logger.LogInformation("Confirmation of email change link sent to user email.");
        }
        else
        {
            emailStatus = new StatusModel(result.Error.Message, MessageLevel.Error);
            Logger.LogWarning("{code}: {message}", result.Error.Code, result.Error.Message);
        }
    }

    private async Task EditPasswordAsync()
    {
        var command = new ChangePasswordCommand(user.Id, PasswordInput.OldPassword, PasswordInput.NewPassword);
        var result = await Sender.SendAsync(command);
        if (result.IsSuccess)
        {
            passwordStatus = new StatusModel("Your password has been changed.", MessageLevel.Success);
            Logger.LogInformation("User changed their password successfully.");
            //RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
        }
        else
        {
            passwordStatus = new StatusModel(result.Error.Message, MessageLevel.Error);
            Logger.LogWarning("{code}: {message}", result.Error.Code, result.Error.Message);
        }
    }

}
