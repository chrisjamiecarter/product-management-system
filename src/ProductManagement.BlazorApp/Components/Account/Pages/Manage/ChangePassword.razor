@inject ISenderService Sender

<h3 class="h3 mb-3 fw-normal">Change password</h3>
<div class="row mb-4">
    <div class="col-xl-6">
        <StatusMessage Status="@status" />
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="ChangePasswordAsync" method="post" data-loading-button>
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.CurrentPassword" id="Input.CurrentPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter the old password" />
                <label for="Input.CurrentPassword" class="form-label">Current password</label>
                <ValidationMessage For="() => Input.CurrentPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.UpdatedPassword" id="Input.UpdatedPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.UpdatedPassword" class="form-label">New password</label>
                <ValidationMessage For="() => Input.UpdatedPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-dark w-100">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private StatusModel status = StatusModel.None;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [Parameter, EditorRequired]
    public ApplicationUserDto User { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-password")]
    private ChangePasswordInputModel Input { get; set; } = new();

    private async Task ChangePasswordAsync()
    {
        var command = new ChangePasswordCommand(User.Id, Input.CurrentPassword, Input.UpdatedPassword);
        var result = await Sender.SendAsync(command);
        if (result.IsSuccess)
        {
            status = new StatusModel("Your password has been changed.", MessageLevel.Success);
        }
        else
        {
            status = new StatusModel(result.Error.Message, MessageLevel.Error);
        }
    }
}
