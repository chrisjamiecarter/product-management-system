@page "/Account/Manage/ChangePassword"

@inject ILogger<ChangePassword> Logger
@inject IdentityRedirectManager RedirectManager

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Status="@status" />
<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" id="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter the old password" />
                <label for="Input.OldPassword" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.NewPassword" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private StatusModel status = StatusModel.None;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private ChangePasswordInputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        // user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        // hasPassword = await UserManager.HasPasswordAsync(user);
        // if (!hasPassword)
        // {
        //     RedirectManager.RedirectTo("Account/Manage/SetPassword");
        // }
    }

    private void OnValidSubmitAsync()
    {
        // var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        // if (!changePasswordResult.Succeeded)
        // {
        //     var statusMessage = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
        //     status = new StatusModel(statusMessage, MessageLevel.Error);
        //     return;
        // }

        // await SignInManager.RefreshSignInAsync(user);
        // Logger.LogInformation("User changed their password successfully.");

        // RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }
}
