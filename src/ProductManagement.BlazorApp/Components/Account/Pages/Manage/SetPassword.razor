@page "/Account/Manage/SetPassword"

@inject ICurrentUserService CurrentUserService
@inject ISenderService Sender
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set password</PageTitle>

<div class="container-md py-3">

    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb mb-1">
            <li class="breadcrumb-item" aria-current="page">Account</li>
            <li class="breadcrumb-item"><NavLink class="link-dark link-underline-opacity-0 link-underline-opacity-100-hover" href="Account/Manage">Manage</NavLink></li>
            <li class="breadcrumb-item active" aria-current="page">Set Password</li>
        </ol>
    </nav>

    <div class="d-flex gap-3 align-items-center mb-4">
        <PersonGearFillSvg Height="1.5rem" Width="1.5rem" />
        <h1 class="h2 mb-0">Set Password</h1>
    </div>

    <StatusMessage Status="@status" />
    <div class="row">
        <div class="col-xl-6">
            <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.UpdatedPassword" id="Input.UpdatedPassword" class="form-control" autocomplete="new-password" placeholder="Enter the new password" />
                    <label for="Input.UpdatedPassword" class="form-label">New password</label>
                    <ValidationMessage For="() => Input.UpdatedPassword" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Enter the new password" />
                    <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-dark btn-lg w-100 px-3">Set password</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private StatusModel status = StatusModel.None;
    private string? userId = default;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private SetPasswordInputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        userId = CurrentUserService.UserId;
        if (string.IsNullOrWhiteSpace(userId))
        {
            var status = new StatusModel($"Unable to get current user.", MessageLevel.Error);
            RedirectManager.RedirectToWithStatus("Account/InvalidUser", status, HttpContext);
        }

        var hasPasswordQuery = new HasPasswordQuery(userId);
        var hasPasswordResult = await Sender.SendAsync(hasPasswordQuery);
        if (hasPasswordResult.IsSuccess && hasPasswordResult.Value.HasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(Input.UpdatedPassword))
        {
            status.Message = "Invalid user or password.";
            status.Level = MessageLevel.Error;
            return;
        }

        var command = new AddPasswordCommand(userId, Input.UpdatedPassword);
        var result = await Sender.SendAsync(command);
        if (result.IsSuccess)
        {
            var newStatus = new StatusModel("Your password has been set.", MessageLevel.Success);
            RedirectManager.RedirectToCurrentPageWithStatus(newStatus, HttpContext);
        }
        else
        {
            status = new StatusModel(result.Error.Message, MessageLevel.Error);
            return;
        }
    }
}
