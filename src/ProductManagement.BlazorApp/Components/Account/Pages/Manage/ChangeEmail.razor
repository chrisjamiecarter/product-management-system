@inject ICurrentUserService CurrentUserService
@inject ILogger<ChangeEmail> Logger
@inject ISenderService Sender

<h3 class="mb-3 fw-normal">Change email</h3>
<div class="row mb-4">
    <div class="col-xl-6">
        <StatusMessage Status="status" />
        @if (Input is not null)
        {
            <EditForm Model="Input" FormName="change-email" OnValidSubmit="EditEmailAsync" method="post">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3 input-group">
                    <input type="text" value="@User.Email" id="email" class="form-control" placeholder="Enter your email" disabled />
                    <div class="input-group-append">
                        <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                    </div>
                    <label for="email" class="form-label">Email</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.UpdatedEmail" id="Input.UpdatedEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter a new email" />
                    <label for="Input.UpdatedEmail" class="form-label">New email</label>
                    <ValidationMessage For="() => Input.UpdatedEmail" class="text-danger" />
                </div>
                <div class="d-flex gap-1">
                    <button class="btn btn-dark w-100" type="submit">Update email</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private StatusModel status = StatusModel.None;

    [Parameter, EditorRequired]
    public ApplicationUserDto User { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private ChangeEmailInputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(User?.Email))
        {
            Input.UpdatedEmail ??= User.Email;
        }
    }

    private async Task EditEmailAsync()
    {
        if (Input.UpdatedEmail is null || Input.UpdatedEmail == User.Email)
        {
            status = new StatusModel("Your email is unchanged.", MessageLevel.Info);
            return;
        }

        var command = new GenerateEmailChangeCommand(User.Id, Input.UpdatedEmail);

        var result = await Sender.SendAsync(command);
        if (result.IsSuccess)
        {
            status = new StatusModel("Confirmation link to change email sent. Please check your email.", MessageLevel.Success);
            Logger.LogInformation("Confirmation of email change link sent to user email.");
        }
        else
        {
            status = new StatusModel(result.Error.Message, MessageLevel.Error);
            Logger.LogWarning("{code}: {message}", result.Error.Code, result.Error.Message);
        }
    }
}
