@page "/Account/ConfirmEmail"

@inject ILogger<ConfirmEmail> Logger
@inject ISenderService Sender
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<section class="container-md py-3">

    <div class="d-flex gap-3 align-items-center mb-4">
        <PersonFillSvg Height="1.5rem" Width="1.5rem" />
        <h1 class="h2 mb-0">Confirm Email</h1>
    </div>

    <StatusMessage Status="@status" />

</section>

@code {
    private StatusModel status = StatusModel.None;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            var newStatus = new StatusModel("Invalid email confirmation link.", MessageLevel.Error);
            Logger.LogWarning("{code}: {message}", newStatus.Level, newStatus.Message);
            RedirectManager.RedirectToWithStatus("Account/Signin", newStatus, HttpContext);
        }

        var token = AuthToken.Decode(Code);
        var confirmCommand = new ConfirmEmailCommand(UserId, token);
        var confirmResult = await Sender.SendAsync(confirmCommand);
        if (confirmResult.IsSuccess)
        {
            Logger.LogInformation("User email confirmed.");
            
            var signInCommand = new SignInCommand(UserId);
            var signInResult = await Sender.SendAsync(signInCommand);
            if (signInResult.IsSuccess)
            {
                Logger.LogInformation("User signed in.");
                
                // If the user DOES have a password - Redirect to ConfirmEmailConfirmation.
                // If the user DOES NOT have a password - Redirect to SetPassword.
                var hasPasswordQuery = new HasPasswordQuery(UserId);
                var hasPasswordResult = await Sender.SendAsync(hasPasswordQuery);
                if (hasPasswordResult.IsSuccess && !hasPasswordResult.Value.HasPassword)
                {
                    var newStatus = new StatusModel("Thank you for confirming your email.", MessageLevel.Success);
                    RedirectManager.RedirectToWithStatus("Account/Manage/SetPassword", newStatus, HttpContext);
                }
                else
                {
                    RedirectManager.RedirectTo("Account/ConfirmEmailConfirmation");
                }
            }
            else
            {
                var newStatus = new StatusModel("Error signing in.", MessageLevel.Error);
                Logger.LogWarning("{code}: {message}", signInResult.Error.Code, signInResult.Error.Message);
                RedirectManager.RedirectToWithStatus("Account/Signin", newStatus, HttpContext);
            }
        }
        else
        {
            var newStatus = new StatusModel("Error confirming your email.", MessageLevel.Error);
            Logger.LogWarning("{code}: {message}", confirmResult.Error.Code, confirmResult.Error.Message);
            RedirectManager.RedirectToWithStatus("Account/Signin", newStatus, HttpContext);
        }
    }
}
