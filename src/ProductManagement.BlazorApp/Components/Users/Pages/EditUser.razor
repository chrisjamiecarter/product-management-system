@page "/users/edit/{Id}"
@attribute [Authorize(Roles = "Owner,Admin")]
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Edit User</PageTitle>

@if (UpdateUserDto is null || EditContext is null)
{
    <LoadingSpinner />
}
else
{
    <div class="container-md py-3">

        <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
            <ol class="breadcrumb mb-1">
                <li class="breadcrumb-item"><NavLink class="link-dark link-underline-opacity-0 link-underline-opacity-100-hover" href="users">Users</NavLink></li>
                <li class="breadcrumb-item active" aria-current="page">Edit</li>
            </ol>
        </nav>

        <div class="d-flex gap-3 align-items-center mb-4">
            <CartDashFillSvg Height="1.5rem" Width="1.5rem" />
            <h1 class="h2 mb-0">Edit User</h1>
        </div>

        <div class="form-group col-lg-6">
            <EditForm EditContext="EditContext" FormName="UpdateUser" OnValidSubmit="ShowConfirmation">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText id="updateUserUsername" class=@($"form-control {EditContext?.GetValidationClass(() => UpdateUserDto.Username)}") placeholder="username" @bind-Value="UpdateUserDto.Username" />
                    <label for="updateUserUsername" class="form-label">Username</label>
                    <ValidationMessage For="() => UpdateUserDto.Username" class="invalid-feedback" />
                </div>
                <div class="form-check form-switch mb-3">
                    <InputCheckbox id="updateUserEmailConfirmed" class="form-check-input" disabled readonly @bind-Value="UpdateUserDto.EmailConfirmed" />
                    <label for="updateUserEmailConfirmed" class="form-check-label">Email Confirmed</label>
                </div>
                <div class="d-flex gap-1">
                    <button class="btn btn-outline-dark w-100" type="submit">Update</button>
                    <button class="btn btn-dark w-100" type="button" @onclick="() => NavigateToUsers()">Cancel</button>
                </div>
            </EditForm>
        </div>

        @if (ShowConfirmationModal)
        {
            <ConfirmationModal Title="Edit this user?"
                               Message="Do you really want to edit this user? This action will reset their Email Confirmed status and send out a new confirmation email."
                               OnCancelCallback="HideConfirmation"
                               OnConfirmCallback="EditUserAsync" />
        }
    </div>
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private UpdateUserDto? UpdateUserDto;
    private EditContext? EditContext;
    private bool ShowConfirmationModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var query = new GetUserByIdQuery(Id);
        var response = await UserService.ReturnByIdAsync(query);

        if (response.IsSuccess)
        {
            UpdateUserDto = new UpdateUserDto(response.Value);
            EditContext = new EditContext(UpdateUserDto);
        }
        else
        {
            // TODO: Log.
            ToastService.ShowToast(response.Error.Message, ToastLevel.Error);
        }
    }

    private async Task EditUserAsync()
    {
        if (UpdateUserDto is null)
        {
            return;
        }

        var command = new UpdateUserCommand(UpdateUserDto.Id, UpdateUserDto.Username!, false);
        var response = await UserService.UpdateAsync(command);

        if (response.IsSuccess)
        {
            ToastService.ShowToast("User updated", ToastLevel.Success);
            NavigateToUsers();
        }
        else
        {
            // TODO: Log.
            ToastService.ShowToast(response.Error.Message, ToastLevel.Error);
        }
    }

    private void NavigateToUsers()
    {
        NavigationManager.NavigateTo("/users");
    }

    private void ShowConfirmation()
    {
        ShowConfirmationModal = true;
    }

    private void HideConfirmation()
    {
        ShowConfirmationModal = false;
    }
}
