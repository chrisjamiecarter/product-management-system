@page "/users/add"

@inject NavigationManager NavigationManager
@inject ISenderService Sender
@inject IToastService ToastService

@rendermode InteractiveServer

<PageTitle>Add User</PageTitle>

@if (EditContext is null)
{
    <LoadingSpinner />
}
else
{
    <div class="container-md py-3">

        <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
            <ol class="breadcrumb mb-1">
                <li class="breadcrumb-item"><NavLink class="link-dark link-underline-opacity-0 link-underline-opacity-100-hover" href="users">Users</NavLink></li>
                <li class="breadcrumb-item active" aria-current="page">Add</li>
            </ol>
        </nav>

        <div class="d-flex gap-3 align-items-center mb-4">
            <CartPlusFillSvg Height="1.5rem" Width="1.5rem" />
            <h1 class="h2 mb-0">Add New User</h1>
        </div>

        <div class="form-group col-lg-6">
            <EditForm EditContext="EditContext" FormName="AddUser" OnValidSubmit="AddUserAsync">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText id="Input.Email" class=@($"form-control {EditContext?.GetValidationClass(() => Input.Email)}") placeholder="name@example.com" @bind-Value="Input.Email" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="invalid-feedback" />
                </div>
                <div class="form-floating mb-3">
                    <FixedInputSelect id="Input.Role" class=@($"form-select {EditContext?.GetValidationClass(() => Input.Role)}") @bind-Value="Input.Role">
                        <option value="">None</option>
                        @foreach(var role in Roles.AllRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </FixedInputSelect>
                    <label for="Input.Role">Role</label>
                    <ValidationMessage For="() => Input.Role" class="invalid-feedback" />
                </div>
                <div class="d-flex gap-1">
                    <button class="btn btn-outline-dark w-100" type="submit">Create</button>
                    <button class="btn btn-dark w-100" type="button" @onclick="() => NavigateToUsers()">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private CreateUserInputModel Input = new();
    private EditContext? EditContext;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Input);
    }

    private async Task AddUserAsync()
    {
        var command = new RegisterCommand(Input.Email, Input.Password, Input.Role);
        var response = await Sender.SendAsync(command);
        if (response.IsSuccess)
        {
            ToastService.ShowToast("User created", ToastLevel.Success);
            NavigateToUsers();
        }
        else
        {
            // TODO: Log.
            ToastService.ShowToast(response.Error.Message, ToastLevel.Error);
        }
    }

    private void NavigateToUsers()
    {
        NavigationManager.NavigateTo("/users");
    }
}
