@page "/products"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@rendermode InteractiveServer

<PageTitle>Products</PageTitle>

<div class="container-md py-3">

    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb mb-1">
            <li class="breadcrumb-item active" aria-current="page">Products</li>
            <li class="breadcrumb-item active" aria-current="page">List</li>
        </ol>
    </nav>

    <div class="d-flex gap-3 align-items-center mb-4">
        <CartFillSvg Height="1.5rem" Width="1.5rem" />
        <h1 class="h2 mb-0">Products</h1>
    </div>

    @if (ProductsPage is null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th scope="col" class="col-6 table-dark">Name</th>
                        <th scope="col" class="col-1 table-dark text-center">Active</th>
                        <th scope="col" class="col-2 table-dark">Added On</th>
                        <th scope="col" class="col-2 table-dark">Price</th>
                        <th scope="col" class="col-1">
                            <button class="btn btn-sm btn-outline-dark w-100 h-100" type="button" aria-label="Add Product" title="Add Product" @onclick="() => NavigateToAddProduct()">
                                <div class="d-flex align-items-center justify-content-center">
                                    <CartPlusSvg />
                                </div>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in ProductsPage.Items)
                    {
                        <tr title="@product.Description">
                            <td>@product.Name</td>
                            <td class="text-center">
                                @if (@product.IsActive)
                                {
                                    <CheckCircleSvg />
                                }
                                else
                                {
                                    <XCircleSvg />
                                }
                            </td>
                            <td>@product.AddedOnUtc</td>
                            <td>@product.Price</td>
                            <td scope="row">
                                <div class="d-flex flex-column flex-md-row gap-1" >
                                    <button class="btn btn-sm btn-outline-dark w-100" type="button" aria-label="Edit Product" title="Edit Product" @onclick="() => NavigateToEditProduct(product.Id)">
                                        <div class="d-flex align-items-center justify-content-center">
                                            <CartDashSvg />
                                        </div>
                                    </button>
                                    <button class="btn btn-sm btn-outline-dark w-100" type="button" aria-label="Delete Product" title="Delete Product" @onclick="() => NavigateToDeleteProduct(product.Id)">
                                        <div class="d-flex align-items-center justify-content-center">
                                            <CartXSvg />
                                        </div>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="pagination flex-column-reverse align-items-center flex-md-row align-items-md-start justify-content-md-between">
                <span class="small text-muted">
                    Showing @(ProductsPage.TotalCount) results
                </span>
                <nav aria-label="Select page">
                    <ul class="pagination">
                        <li class="page-item @(ProductsPage.IsFirstPage ? "disabled" : "")">
                            <button class="page-link link-dark h-100" type="button" @onclick="@(() => GetProductsAsync(1))">
                                <div class="d-flex align-items-center">
                                    <ChevronDoubleLeftSvg />
                                </div>
                            </button>
                        </li>
                        <li class="page-item @(ProductsPage.HasPreviousPage ? "" : "disabled")">
                            <button class="page-link link-dark h-100" type="button" @onclick="@(() => GetProductsAsync(ProductsPage.PageNumber - 1))">
                                <div class="d-flex align-items-center">
                                    <ChevronLeftSvg />
                                </div>
                            </button>
                        </li>
                        <li class="page-item disabled">
                            <button class="page-link h-100" type="button">@(ProductsPage.PageNumber) of @(ProductsPage.TotalPages)</button>
                        </li>
                        <li class="page-item @(ProductsPage.HasNextPage ? "" : "disabled")">
                            <button class="page-link link-dark h-100" type="button" @onclick="@(() => GetProductsAsync(ProductsPage.PageNumber + 1))">
                                <div class="d-flex align-items-center">
                                    <ChevronRightSvg />
                                </div>
                            </button>
                        </li>
                        <li class="page-item @(ProductsPage.IsLastPage ? "disabled" : "")">
                            <button class="page-link link-dark h-100" type="button" @onclick="@(() => GetProductsAsync(ProductsPage.TotalPages))">
                                <div class="d-flex align-items-center">
                                    <ChevronDoubleRightSvg />
                                </div>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

@code {
    private PaginatedList<GetProductsPaginatedQueryResponse>? ProductsPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetProductsAsync();
    }

    private async Task GetProductsAsync(int pageNumber = 1)
    {
        var query = new GetProductsPaginatedQuery(pageNumber);
        var response = await ProductService.ReturnByPageAsync(query);
        if (response.IsSuccess)
        {
            ProductsPage = response.Value;
        }
        else
        {
            ProductsPage = PaginatedList<GetProductsPaginatedQueryResponse>.Create([], 0, query.PageNumber, query.PageSize);
        }
    }

    // private async Task FilterProducts()
    // {
    //     var query = new GetProductsQuery();
    //     var response = await ProductService.ReturnAllAsync(query);
    //     if (response.IsSuccess)
    //     {
    //         var querableList = response.Value.Products.AsQueryable();
    //         totalRecords = querableList.Count();
    //         FilteredProducts = querableList.Skip(pageNumber - 1 * pageSize).Take(pageSize).ToList();
    //     }
    //     else
    //     {
    //         FilteredProducts = [];
    //     }
    // }

    private void NavigateToAddProduct()
    {
        NavigationManager.NavigateTo("/products/add");
    }

    private void NavigateToDeleteProduct(Guid id)
    {
        NavigationManager.NavigateTo($"/products/delete/{id}");
    }

    private void NavigateToEditProduct(Guid id)
    {
        NavigationManager.NavigateTo($"/products/edit/{id}");
    }
}