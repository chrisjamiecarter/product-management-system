@page "/products/delete/{Id:guid}"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@rendermode InteractiveServer

<PageTitle>Delete Product</PageTitle>

<div class="container-md py-3">

    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb mb-1">
            <li class="breadcrumb-item"><NavLink class="link-dark link-underline-opacity-0 link-underline-opacity-100-hover" href="products">Products</NavLink></li>
            <li class="breadcrumb-item active" aria-current="page">Delete</li>
        </ol>
    </nav>

    <div class="d-flex gap-3 align-items-center mb-4">
        <CartXFillSvg Height="1.5rem" Width="1.5rem" />
        <h1 class="h2 mb-0">Delete Product</h1>
    </div>

    @if (DeleteProductDto is null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="form-group col-lg-6">
            <EditForm Model="DeleteProductDto" FormName="DeleteProduct" OnValidSubmit="ShowDeleteConfirmation">
                <div class="form-floating mb-3">
                    <InputText id="updateProductName" class="form-control" placeholder="name" disabled readonly @bind-Value="DeleteProductDto.Name" />
                    <label for="updateProductName" class="form-label">Name</label>
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea id="updateProductDescription" class="form-control" placeholder="description" disabled readonly @bind-Value="DeleteProductDto.Description" />
                    <label for="updateProductDescription" class="form-label">Description</label>
                </div>
                <div class="form-floating mb-3">
                    <InputNumber id="updateProductPrice" class="form-control" placeholder="name" disabled readonly @bind-Value="DeleteProductDto.Price" />
                    <label for="updateProductPrice" class="form-label">Price</label>
                </div>
                <div class="form-check form-switch mb-3">
                    <InputCheckbox id="updateProductIsActive" class="form-check-input" disabled readonly @bind-Value="DeleteProductDto.IsActive" />
                    <label for="updateProductIsActive" class="form-check-label">Is Active</label>
                </div>
                <div class="form-floating mb-3">
                    <InputDate id="updateProductAddedOnUtc" class="form-control" placeholder="name" disabled readonly @bind-Value="DeleteProductDto.AddedOnUtc" />
                    <label for="updateProductAddedOnUtc" class="form-label">Added On</label>
                </div>
                <div class="d-flex gap-1">
                    <button class="btn btn-outline-dark w-100" type="submit">Delete</button>
                    <button class="btn btn-dark w-100" type="button" @onclick="() => NavigateToProducts()">Cancel</button>
                </div>
            </EditForm>
        </div>

        @if(ShowDeleteModal)
        {
            <ConfirmationModal 
                Title="Delete this product?" 
                Message="Do you really want to delete this product? This action cannot be undone."
                OnCancelCallback="HideDeleteConfirmation"
                OnConfirmCallback="DeleteProductAsync"/>
        }
    }
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    private DeleteProductDto? DeleteProductDto;
    private bool ShowDeleteModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var query = new GetProductByIdQuery(Id);
        var response = await ProductService.ReturnByIdAsync(query);

        if (response.IsSuccess)
        {
            DeleteProductDto = new DeleteProductDto(response.Value);
        }
        else
        {
            // TODO: Log and Toast.
        }
    }

    private async Task DeleteProductAsync()
    {
        if (DeleteProductDto is null)
        {
            // TODO: Log and Toast.
            return;
        }

        var command = new DeleteProductCommand(DeleteProductDto.Id);
        var response = await ProductService.DeleteAsync(command);

        if (response.IsSuccess)
        {
            // TODO: Toast.
            NavigateToProducts();
        }
        else
        {
            // TODO: Log and Toast.
        }
    }

    private void NavigateToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }

    private void ShowDeleteConfirmation()
    {
        ShowDeleteModal = true;
    }

    private void HideDeleteConfirmation()
    {
        ShowDeleteModal = false;
    }
}
